volumes:
  cargo-cache:
  cargo-registry:
  cargo-target:

services:
  # Ethereum Mainnet Tycho API (Development)
  tycho-api-ethereum-dev:
    build: 
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: tycho-api-ethereum-dev
    ports:
      - "4001:3000"
    environment:
      TYCHO_API_KEY: ${TYCHO_API_KEY}
      RUST_LOG: ${RUST_LOG:-debug}
      RUST_BACKTRACE: 1
      TVL_THRESHOLD: ${TVL_THRESHOLD}
      TYCHO_ETHEREUM_URL: ${TYCHO_ETHEREUM_URL}
    command: ["/bin/bash", "-c", "cargo watch -x 'run -- --tvl-threshold ${TVL_THRESHOLD} --chain ethereum --port 3000 --tycho-url ${TYCHO_ETHEREUM_URL}'"]
    volumes:
      # Mount source code for development
      - ./api/src:/app/src:ro
      - ./api/Cargo.toml:/app/Cargo.toml:ro
      - ./api/Cargo.lock:/app/Cargo.lock:ro
      # Share cargo cache and build artifacts
      - cargo-cache:/usr/local/cargo/registry
      - cargo-registry:/usr/local/cargo/git
      - cargo-target:/app/target
    networks:
      - tycho-network-dev
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:3000/ || (echo 'ðŸ”´ [HEALTH] Ethereum API health check failed' && exit 1)"]
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 180s
    labels:
      - "com.swift.service=tycho-api"
      - "com.swift.chain=ethereum"
      - "com.swift.env=development"
  
  # Base Mainnet Tycho API (Development)
  tycho-api-base-dev:
    build: 
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: tycho-api-base-dev
    depends_on:
      tycho-api-ethereum-dev:
        condition: service_healthy
    ports:
      - "4002:3000"
    environment:
      TYCHO_API_KEY: ${TYCHO_API_KEY}
      RUST_LOG: ${RUST_LOG:-debug}
      RUST_BACKTRACE: 1
      TVL_THRESHOLD: ${TVL_THRESHOLD}
      TYCHO_BASE_URL: ${TYCHO_BASE_URL}
    command: ["/bin/bash", "-c", "cargo watch -x 'run -- --tvl-threshold ${TVL_THRESHOLD} --chain base --port 3000 --tycho-url ${TYCHO_BASE_URL}'"]
    volumes:
      # Mount source code for development
      - ./api/src:/app/src:ro
      - ./api/Cargo.toml:/app/Cargo.toml:ro
      - ./api/Cargo.lock:/app/Cargo.lock:ro
      # Share cargo cache and build artifacts
      - cargo-cache:/usr/local/cargo/registry
      - cargo-registry:/usr/local/cargo/git
      - cargo-target:/app/target
    networks:
      - tycho-network-dev
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:3000/ || (echo 'ðŸ”´ [HEALTH] Base API health check failed' && exit 1)"]
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 180s
    labels:
      - "com.swift.service=tycho-api"
      - "com.swift.chain=base"
      - "com.swift.env=development"
  
  # Unichain Mainnet Tycho API (Development)
  tycho-api-unichain-dev:
    build: 
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: tycho-api-unichain-dev
    depends_on:
      tycho-api-ethereum-dev:
        condition: service_healthy
    ports:
      - "4003:3000"
    environment:
      TYCHO_API_KEY: ${TYCHO_API_KEY}
      RUST_LOG: ${RUST_LOG:-debug}
      RUST_BACKTRACE: 1
      TVL_THRESHOLD: ${TVL_THRESHOLD}
      TYCHO_UNICHAIN_URL: ${TYCHO_UNICHAIN_URL}
    command: ["/bin/bash", "-c", "cargo watch -x 'run -- --tvl-threshold ${TVL_THRESHOLD} --chain unichain --port 3000 --tycho-url ${TYCHO_UNICHAIN_URL}'"]
    volumes:
      # Mount source code for development
      - ./api/src:/app/src:ro
      - ./api/Cargo.toml:/app/Cargo.toml:ro
      - ./api/Cargo.lock:/app/Cargo.lock:ro
      # Share cargo cache and build artifacts
      - cargo-cache:/usr/local/cargo/registry
      - cargo-registry:/usr/local/cargo/git
      - cargo-target:/app/target
    networks:
      - tycho-network-dev
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:3000/ || (echo 'ðŸ”´ [HEALTH] Unichain API health check failed' && exit 1)"]
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 180s
    labels:
      - "com.swift.service=tycho-api"
      - "com.swift.chain=unichain"
      - "com.swift.env=development"
  
  # Frontend Application (Development)
  frontend-dev:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - BUILDKIT_PROGRESS=plain
        - VITE_WEBSOCKET_URL_ETHEREUM=${VITE_WEBSOCKET_URL_ETHEREUM}
        - VITE_WEBSOCKET_URL_BASE=${VITE_WEBSOCKET_URL_BASE}
        - VITE_WEBSOCKET_URL_UNICHAIN=${VITE_WEBSOCKET_URL_UNICHAIN}
        - VITE_API_ETHEREUM_URL=${VITE_API_ETHEREUM_URL}
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - VITE_API_UNICHAIN_URL=${VITE_API_UNICHAIN_URL}
    container_name: tycho-explorer-frontend-dev
    ports:
      - "5173:5173"  # Vite default dev server port
    depends_on:
      tycho-api-ethereum-dev:
        condition: service_healthy
    environment:
      VITE_WEBSOCKET_URL_ETHEREUM: ${VITE_WEBSOCKET_URL_ETHEREUM}
      VITE_WEBSOCKET_URL_BASE: ${VITE_WEBSOCKET_URL_BASE}
      VITE_WEBSOCKET_URL_UNICHAIN: ${VITE_WEBSOCKET_URL_UNICHAIN}
      VITE_API_ETHEREUM_URL: ${VITE_API_ETHEREUM_URL}
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_API_UNICHAIN_URL: ${VITE_API_UNICHAIN_URL}
    volumes:
      # Mount source code for hot reloading
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      # Prevent node_modules from being overwritten
      - /app/node_modules
    networks:
      - tycho-network-dev
    labels:
      - "com.swift.service=frontend"
      - "com.swift.env=development"

networks:
  tycho-network-dev:
    driver: bridge
    driver_opts:
      com.docker.network.debug: "true"